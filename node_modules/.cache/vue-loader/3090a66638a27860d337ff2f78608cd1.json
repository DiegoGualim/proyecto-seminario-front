{"remainingRequest":"/Users/diegogualim/Documents/PROYECTO_RAFA/CODING/proyecto-seminario-front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/diegogualim/Documents/PROYECTO_RAFA/CODING/proyecto-seminario-front/src/views/VideoColores.vue?vue&type=template&id=04fc5890&","dependencies":[{"path":"/Users/diegogualim/Documents/PROYECTO_RAFA/CODING/proyecto-seminario-front/src/views/VideoColores.vue","mtime":1685236719433},{"path":"/Users/diegogualim/Documents/PROYECTO_RAFA/CODING/proyecto-seminario-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/diegogualim/Documents/PROYECTO_RAFA/CODING/proyecto-seminario-front/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/diegogualim/Documents/PROYECTO_RAFA/CODING/proyecto-seminario-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/diegogualim/Documents/PROYECTO_RAFA/CODING/proyecto-seminario-front/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}