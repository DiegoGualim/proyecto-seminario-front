{"remainingRequest":"/Users/diegogualim/Documents/PROYECTOS_GRADUACION/PROYECTO_OTTO/proyecto_frond/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/diegogualim/Documents/PROYECTOS_GRADUACION/PROYECTO_OTTO/proyecto_frond/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/diegogualim/Documents/PROYECTOS_GRADUACION/PROYECTO_OTTO/proyecto_frond/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/diegogualim/Documents/PROYECTOS_GRADUACION/PROYECTO_OTTO/proyecto_frond/src/views/VideoPronombres.vue?vue&type=template&id=71f06be4&","dependencies":[{"path":"/Users/diegogualim/Documents/PROYECTOS_GRADUACION/PROYECTO_OTTO/proyecto_frond/src/views/VideoPronombres.vue","mtime":1685254568956},{"path":"/Users/diegogualim/Documents/PROYECTOS_GRADUACION/PROYECTO_OTTO/proyecto_frond/node_modules/cache-loader/dist/cjs.js","mtime":1682135249203},{"path":"/Users/diegogualim/Documents/PROYECTOS_GRADUACION/PROYECTO_OTTO/proyecto_frond/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1682135279452},{"path":"/Users/diegogualim/Documents/PROYECTOS_GRADUACION/PROYECTO_OTTO/proyecto_frond/node_modules/cache-loader/dist/cjs.js","mtime":1682135249203},{"path":"/Users/diegogualim/Documents/PROYECTOS_GRADUACION/PROYECTO_OTTO/proyecto_frond/node_modules/vue-loader/lib/index.js","mtime":1682135279447}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}