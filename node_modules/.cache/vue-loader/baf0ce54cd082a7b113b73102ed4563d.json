{"remainingRequest":"/Users/diegogualim/Documents/PROYECTOS_GRADUACION/PROYECTO_OTTO/proyecto_frond/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/diegogualim/Documents/PROYECTOS_GRADUACION/PROYECTO_OTTO/proyecto_frond/src/views/VideosAbcdarioDemo.vue?vue&type=template&id=1ad9c30e&","dependencies":[{"path":"/Users/diegogualim/Documents/PROYECTOS_GRADUACION/PROYECTO_OTTO/proyecto_frond/src/views/VideosAbcdarioDemo.vue","mtime":1686351627357},{"path":"/Users/diegogualim/Documents/PROYECTOS_GRADUACION/PROYECTO_OTTO/proyecto_frond/node_modules/cache-loader/dist/cjs.js","mtime":1682135249203},{"path":"/Users/diegogualim/Documents/PROYECTOS_GRADUACION/PROYECTO_OTTO/proyecto_frond/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1682135279452},{"path":"/Users/diegogualim/Documents/PROYECTOS_GRADUACION/PROYECTO_OTTO/proyecto_frond/node_modules/cache-loader/dist/cjs.js","mtime":1682135249203},{"path":"/Users/diegogualim/Documents/PROYECTOS_GRADUACION/PROYECTO_OTTO/proyecto_frond/node_modules/vue-loader/lib/index.js","mtime":1682135279447}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}