{"remainingRequest":"/Users/diegogualim/Documents/GitHub/proyecto-seminario-front/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/diegogualim/Documents/GitHub/proyecto-seminario-front/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/diegogualim/Documents/GitHub/proyecto-seminario-front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/diegogualim/Documents/GitHub/proyecto-seminario-front/src/views/ServiciosMedicos.vue?vue&type=template&id=e9a5ae32&scoped=true&","dependencies":[{"path":"/Users/diegogualim/Documents/GitHub/proyecto-seminario-front/src/views/ServiciosMedicos.vue","mtime":1695581403987},{"path":"/Users/diegogualim/Documents/GitHub/proyecto-seminario-front/node_modules/cache-loader/dist/cjs.js","mtime":1694240006468},{"path":"/Users/diegogualim/Documents/GitHub/proyecto-seminario-front/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1694240048412},{"path":"/Users/diegogualim/Documents/GitHub/proyecto-seminario-front/node_modules/cache-loader/dist/cjs.js","mtime":1694240006468},{"path":"/Users/diegogualim/Documents/GitHub/proyecto-seminario-front/node_modules/vue-loader/lib/index.js","mtime":1694240048407}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}