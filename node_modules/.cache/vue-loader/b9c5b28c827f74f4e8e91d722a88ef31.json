{"remainingRequest":"/Users/diegogualim/Documents/PROYECTOS_GRADUACION/PROYECTO_OTTO/proyecto_frond/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/diegogualim/Documents/PROYECTOS_GRADUACION/PROYECTO_OTTO/proyecto_frond/src/views/VideoPronombresDemo.vue?vue&type=template&id=67e4d791&","dependencies":[{"path":"/Users/diegogualim/Documents/PROYECTOS_GRADUACION/PROYECTO_OTTO/proyecto_frond/src/views/VideoPronombresDemo.vue","mtime":1686352021708},{"path":"/Users/diegogualim/Documents/PROYECTOS_GRADUACION/PROYECTO_OTTO/proyecto_frond/node_modules/cache-loader/dist/cjs.js","mtime":1682135249203},{"path":"/Users/diegogualim/Documents/PROYECTOS_GRADUACION/PROYECTO_OTTO/proyecto_frond/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1682135279452},{"path":"/Users/diegogualim/Documents/PROYECTOS_GRADUACION/PROYECTO_OTTO/proyecto_frond/node_modules/cache-loader/dist/cjs.js","mtime":1682135249203},{"path":"/Users/diegogualim/Documents/PROYECTOS_GRADUACION/PROYECTO_OTTO/proyecto_frond/node_modules/vue-loader/lib/index.js","mtime":1682135279447}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}